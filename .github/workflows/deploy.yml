name: cPanel-deploy

on: 
  push:
    branches: [ "release" ]

jobs:
  conference-deploy:

    runs-on: ubuntu-latest

    env:
      NODE_VERSION: '20.17'
      TMP_DIR: './tmp'
      OUTPUT_FILE: 'deploy.tar.gz'
      REMOTE_DIR: './deploy'

    steps:
    # - name: Put the website in maintenance mode
    #   uses: appleboy/ssh-action@v1.0.0
    #   with:
    #     host: ${{ secrets.SSH_HOST }}
    #     username: ${{ secrets.SSH_USERNAME }}
    #     password: ${{ secrets.SSH_PASSWORD }}
    #     port: 22
    #     script: |
    #       rm site
    #       ln -s maintenance/ site
    
    - uses: shivammathur/setup-php@2.31.1
      with:
        php-version: '8.3.11'
    - uses: actions/checkout@v3
  
    - name: Composer install
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      
    - name: Build using Node.js ${{env.NODE_VERSION}}
      uses: actions/setup-node@v3
      with:
        node-version: ${{env.NODE_VERSION}}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present

    - name: Compress build results
      run: mkdir ${{env.TMP_DIR}} && tar --exclude="${{env.TMP_DIR}}/${{env.OUTPUT_FILE}}" -czf ${{env.TMP_DIR}}/${{env.OUTPUT_FILE}} . 

    - name: Send compressed build result to server
      uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      with:
        server: ${{ secrets.FTP_HOST }}
        username: ${{ secrets.FTP_USERNAME }}        
        password: ${{ secrets.FTP_PASSWORD }}
        port: 21
        protocol: ftps
        local-dir: ${{env.TMP_DIR}}

    # - name: Extract build results on server
    #   uses: appleboy/ssh-action@v1.0.0
    #   with:
    #     host: ${{ secrets.SSH_HOST }}
    #     username: ${{ secrets.SSH_USERNAME }}
    #     password: ${{ secrets.SSH_PASSWORD }}
    #     port: 22
    #     script: |
    #       LATEST_RELEASE=$(find . -maxdepth 1 -name 'site_*' -type d | sort -n | tail -1)
    #       NEW_DIR=$(date +"site_%F_%H%M%S")
    #       mkdir $NEW_DIR
    #       tar -xf ${{env.REMOTE_DIR}}/${{env.OUTPUT_FILE}} -C $NEW_DIR
    #       cp $LATEST_RELEASE/.env $NEW_DIR
    #       cp -r $LATEST_RELEASE/storage $NEW_DIR/
    #       cd $NEW_DIR
    #       php artisan migrate --force
    #       php artisan storage:link
    #       cd -

    #       # Undo maintenance mode
    #       rm site
    #       ln -s $NEW_DIR/ site
